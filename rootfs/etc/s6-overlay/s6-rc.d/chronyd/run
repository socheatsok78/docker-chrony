#!/bin/sh
CHRONYD_FLAGS=${CHRONYD_FLAGS:-}

# LOGLEVEL environment variable is not present, so populate with chrony default (0)
# chrony log levels: 0 (informational), 1 (warning), 2 (non-fatal error) and 3 (fatal error)
if [ -z "${LOGLEVEL}" ]; then
	LOGLEVEL=0
else
	# confirm log level is between 0-3, since these are the only log levels supported
	if [ "${LOGLEVEL}" -gt 3 ]; then
		# level outside of supported range, let's set to default (0)
		LOGLEVEL=0
	fi
fi

# Use IPv4 addresses only
if [ "${IPV4ONLY:-true}" = true ]; then
	CHRONYD_FLAGS="$CHRONYD_FLAGS -4"
fi
# Use IPv6 addresses only
if [ "${IPV6ONLY:-false}" = true ]; then
	CHRONYD_FLAGS="$CHRONYD_FLAGS -6"
fi

if [ -z "$SKIP_SETCAP_SYS_TIME" ]; then
	# Allow chronyd to set the system time
	setcap cap_sys_time=+ep $(readlink -f $(which chronyd))
	# In the case chronyd has been started in a container without SYS_TIME privileges
	if ! chronyd --version 1>/dev/null 2>/dev/null; then
		>&2 echo "==> The SYS_TIME capability has been disabled, please use --cap-add SYS_TIME to enable the feature"
		>&2 echo "==>   This may cause chronyd to not be able to set the system time, and the following message"
		>&2 echo "==>   will be displayed in the logs:"
		>&2 echo "==>     - Disabled control of system clock"
		>&2 echo "==>     - Could not step system clock"
		>&2 echo "==>   You can ignore these messages if you are not using chronyd to set the system time"
		setcap cap_sys_time=-ep $(readlink -f $(which chronyd))
		# -x = Disable setting the system time
		SYS_TIME="-x"
	else
		echo "==> The SYS_TIME capability has been set"
		# -s = Set the system clock from the computerâ€™s real-time clock (RTC)
		#      or to the last modification time of the file specified by
		#      the driftfile directiv
		SYS_TIME="-s"
	fi
fi

if [ -z "$SKIP_SETCAP_IPC_LOCK" ]; then
	# Allow mlock to avoid swapping chronyd memory to disk
	setcap cap_ipc_lock=+ep $(readlink -f $(which chronyd))
	# In the case chronyd has been started in a container without IPC_LOCK privileges
	if ! chronyd --version 1>/dev/null 2>/dev/null; then
		>&2 echo "==>  The IPC_LOCK capability has been disabled, please use --cap-add IPC_LOCK to enable the feature"
		setcap cap_ipc_lock=-ep $(readlink -f $(which chronyd))
		IPC_LOCK=""
	else
		echo "==> The IPC_LOCK capability has been set"
		# -m = Lock chronyd memory to avoid swapping
		IPC_LOCK="-m"
	fi
fi

# -F = Enable system call filter (seccomp)
#      in level 1 the process is killed when a forbidden system call is made,
#      in level -1 the SIGSYS signal is thrown instead and
#      in level 0 the filter is disabled (default 0).
# -L = Log level
# -u = Run as user chrony
# -d = Don't detach from terminal and log to stdout/stderr
exec chronyd -F 1 -L ${LOGLEVEL} -u chrony -d ${SYS_TIME} ${IPC_LOCK} ${CHRONYD_FLAGS}
